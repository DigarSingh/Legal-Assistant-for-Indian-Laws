{"ast":null,"code":"import geminiService from './geminiService';\nclass ApiService {\n  // Mock login method\n  async login(credentials) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          token: 'dummy-token',\n          user: {\n            name: 'User',\n            email: credentials.email\n          }\n        });\n      }, 1000);\n    });\n  }\n\n  // Mock register method\n  async register(userInfo) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          token: 'dummy-token',\n          user: {\n            name: userInfo.name,\n            email: userInfo.email\n          }\n        });\n      }, 1000);\n    });\n  }\n\n  // Forward chat queries to gemini service\n  async sendQuery(query) {\n    try {\n      return await geminiService.generateResponse(query);\n    } catch (error) {\n      console.error(\"Error in sendQuery:\", error);\n      throw error;\n    }\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["geminiService","ApiService","login","credentials","Promise","resolve","setTimeout","token","user","name","email","register","userInfo","sendQuery","query","generateResponse","error","console"],"sources":["D:/Legal Assistant for Indian Laws/client/src/services/api.js"],"sourcesContent":["import geminiService from './geminiService';\r\n\r\nclass ApiService {\r\n  // Mock login method\r\n  async login(credentials) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          token: 'dummy-token',\r\n          user: { name: 'User', email: credentials.email }\r\n        });\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  // Mock register method\r\n  async register(userInfo) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          token: 'dummy-token',\r\n          user: { name: userInfo.name, email: userInfo.email }\r\n        });\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  // Forward chat queries to gemini service\r\n  async sendQuery(query) {\r\n    try {\r\n      return await geminiService.generateResponse(query);\r\n    } catch (error) {\r\n      console.error(\"Error in sendQuery:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,iBAAiB;AAE3C,MAAMC,UAAU,CAAC;EACf;EACA,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAAC;UACNE,KAAK,EAAE,aAAa;UACpBC,IAAI,EAAE;YAAEC,IAAI,EAAE,MAAM;YAAEC,KAAK,EAAEP,WAAW,CAACO;UAAM;QACjD,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMC,QAAQA,CAACC,QAAQ,EAAE;IACvB,OAAO,IAAIR,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAAC;UACNE,KAAK,EAAE,aAAa;UACpBC,IAAI,EAAE;YAAEC,IAAI,EAAEG,QAAQ,CAACH,IAAI;YAAEC,KAAK,EAAEE,QAAQ,CAACF;UAAM;QACrD,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMG,SAASA,CAACC,KAAK,EAAE;IACrB,IAAI;MACF,OAAO,MAAMd,aAAa,CAACe,gBAAgB,CAACD,KAAK,CAAC;IACpD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;AACF;AAEA,eAAe,IAAIf,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}