{"ast":null,"code":"var _jsxFileName = \"D:\\\\Legal Assistant for Indian Laws\\\\client\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, TextField, Button, Typography, Paper, IconButton } from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport MicIcon from '@mui/icons-material/Mic';\nimport { useLanguage } from '../contexts/LanguageContext';\nimport { speechToText } from '../services/languageService';\n\n// Assuming you have a Chat component already, I'll show the modifications needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const chatEndRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const {\n    currentLanguage,\n    detectInputLanguage,\n    translateToEnglish,\n    translateFromEnglish\n  } = useLanguage();\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chat]);\n  const handleSend = async () => {\n    if (message.trim() === '') return;\n\n    // Add user message to chat\n    setChat(prevChat => [...prevChat, {\n      text: message,\n      sender: 'user'\n    }]);\n    const userInput = message;\n    setMessage('');\n    setIsLoading(true);\n    try {\n      // Detect language if needed\n      const detectedLang = await detectInputLanguage(userInput);\n\n      // Translate to English for processing\n      const translatedQuery = await translateToEnglish(userInput, detectedLang || currentLanguage);\n\n      // Send to backend API\n      const response = await processQuery(translatedQuery);\n\n      // Translate response back to user's language\n      const translatedResponse = await translateFromEnglish(response, detectedLang || currentLanguage);\n\n      // Add response to chat\n      setChat(prevChat => [...prevChat, {\n        text: translatedResponse,\n        sender: 'bot',\n        originalLanguage: detectedLang || currentLanguage\n      }]);\n    } catch (error) {\n      console.error('Error processing message:', error);\n      setChat(prevChat => [...prevChat, {\n        text: 'Sorry, I encountered an error processing your request.',\n        sender: 'bot',\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const processQuery = async text => {\n    // Replace with your actual API endpoint\n    const response = await fetch('/api/query', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: text\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get response');\n    }\n    const data = await response.json();\n    return data.response;\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      audioChunksRef.current = [];\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: 'audio/wav'\n        });\n        const text = await speechToText(audioBlob, currentLanguage);\n        if (text) {\n          setMessage(text);\n        }\n      };\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Error starting recording:', error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n      setIsRecording(false);\n    }\n  };\n\n  // Render the chat UI (keep your existing UI with these additions)\n  // ...\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {/* your styles */},\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {/* chat container styles */},\n      children: [chat.map((msg, index) => /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 1,\n        sx: {\n          /* message styling */\n          bgcolor: msg.sender === 'user' ? 'primary.light' : 'background.paper',\n          alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), msg.originalLanguage && msg.originalLanguage !== 'en' && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          sx: {\n            opacity: 0.7\n          },\n          children: [\"Translated from \", msg.originalLanguage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Processing your request...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        variant: \"outlined\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: `Type your question in any Indian language...`,\n        onKeyPress: e => e.key === 'Enter' && handleSend()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        color: isRecording ? \"secondary\" : \"primary\",\n        onClick: isRecording ? stopRecording : startRecording,\n        children: /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        endIcon: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 20\n        }, this),\n        onClick: handleSend,\n        disabled: isLoading || message.trim() === '',\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"hGQt3tTLElBxCvEij3Syab7ytWQ=\", false, function () {\n  return [useLanguage];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","TextField","Button","Typography","Paper","IconButton","SendIcon","MicIcon","useLanguage","speechToText","jsxDEV","_jsxDEV","Chat","_s","message","setMessage","chat","setChat","isLoading","setIsLoading","isRecording","setIsRecording","chatEndRef","mediaRecorderRef","audioChunksRef","currentLanguage","detectInputLanguage","translateToEnglish","translateFromEnglish","_chatEndRef$current","current","scrollIntoView","behavior","handleSend","trim","prevChat","text","sender","userInput","detectedLang","translatedQuery","response","processQuery","translatedResponse","originalLanguage","error","console","fetch","method","headers","body","JSON","stringify","query","ok","Error","data","json","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","ondataavailable","event","size","push","onstop","audioBlob","Blob","type","start","stopRecording","state","stop","getTracks","forEach","track","sx","children","map","msg","index","elevation","bgcolor","alignSelf","fileName","_jsxFileName","lineNumber","columnNumber","variant","opacity","ref","display","mt","fullWidth","value","onChange","e","target","placeholder","onKeyPress","key","color","onClick","endIcon","disabled","_c","$RefreshReg$"],"sources":["D:/Legal Assistant for Indian Laws/client/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Box, TextField, Button, Typography, Paper, IconButton } from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport MicIcon from '@mui/icons-material/Mic';\r\nimport { useLanguage } from '../contexts/LanguageContext';\r\nimport { speechToText } from '../services/languageService';\r\n\r\n// Assuming you have a Chat component already, I'll show the modifications needed\r\n\r\nfunction Chat() {\r\n  const [message, setMessage] = useState('');\r\n  const [chat, setChat] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const chatEndRef = useRef(null);\r\n  const mediaRecorderRef = useRef(null);\r\n  const audioChunksRef = useRef([]);\r\n  \r\n  const { \r\n    currentLanguage,\r\n    detectInputLanguage,\r\n    translateToEnglish,\r\n    translateFromEnglish\r\n  } = useLanguage();\r\n\r\n  useEffect(() => {\r\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [chat]);\r\n\r\n  const handleSend = async () => {\r\n    if (message.trim() === '') return;\r\n    \r\n    // Add user message to chat\r\n    setChat(prevChat => [...prevChat, { text: message, sender: 'user' }]);\r\n    const userInput = message;\r\n    setMessage('');\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Detect language if needed\r\n      const detectedLang = await detectInputLanguage(userInput);\r\n      \r\n      // Translate to English for processing\r\n      const translatedQuery = await translateToEnglish(\r\n        userInput, \r\n        detectedLang || currentLanguage\r\n      );\r\n      \r\n      // Send to backend API\r\n      const response = await processQuery(translatedQuery);\r\n      \r\n      // Translate response back to user's language\r\n      const translatedResponse = await translateFromEnglish(\r\n        response,\r\n        detectedLang || currentLanguage\r\n      );\r\n      \r\n      // Add response to chat\r\n      setChat(prevChat => [...prevChat, { \r\n        text: translatedResponse, \r\n        sender: 'bot',\r\n        originalLanguage: detectedLang || currentLanguage\r\n      }]);\r\n    } catch (error) {\r\n      console.error('Error processing message:', error);\r\n      setChat(prevChat => [...prevChat, { \r\n        text: 'Sorry, I encountered an error processing your request.', \r\n        sender: 'bot',\r\n        error: true\r\n      }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  const processQuery = async (text) => {\r\n    // Replace with your actual API endpoint\r\n    const response = await fetch('/api/query', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ query: text }),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to get response');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.response;\r\n  };\r\n  \r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      mediaRecorderRef.current = new MediaRecorder(stream);\r\n      audioChunksRef.current = [];\r\n      \r\n      mediaRecorderRef.current.ondataavailable = (event) => {\r\n        if (event.data.size > 0) {\r\n          audioChunksRef.current.push(event.data);\r\n        }\r\n      };\r\n      \r\n      mediaRecorderRef.current.onstop = async () => {\r\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\r\n        const text = await speechToText(audioBlob, currentLanguage);\r\n        if (text) {\r\n          setMessage(text);\r\n        }\r\n      };\r\n      \r\n      mediaRecorderRef.current.start();\r\n      setIsRecording(true);\r\n    } catch (error) {\r\n      console.error('Error starting recording:', error);\r\n    }\r\n  };\r\n  \r\n  const stopRecording = () => {\r\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\r\n      mediaRecorderRef.current.stop();\r\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n  \r\n  // Render the chat UI (keep your existing UI with these additions)\r\n  // ...\r\n\r\n  return (\r\n    <Box sx={{ /* your styles */ }}>\r\n      {/* Chat messages display */}\r\n      <Box sx={{ /* chat container styles */ }}>\r\n        {chat.map((msg, index) => (\r\n          <Paper \r\n            key={index} \r\n            elevation={1} \r\n            sx={{ \r\n              /* message styling */ \r\n              bgcolor: msg.sender === 'user' ? 'primary.light' : 'background.paper',\r\n              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n            }}\r\n          >\r\n            <Typography>{msg.text}</Typography>\r\n            {msg.originalLanguage && msg.originalLanguage !== 'en' && (\r\n              <Typography variant=\"caption\" sx={{ opacity: 0.7 }}>\r\n                Translated from {msg.originalLanguage}\r\n              </Typography>\r\n            )}\r\n          </Paper>\r\n        ))}\r\n        {isLoading && <Typography>Processing your request...</Typography>}\r\n        <div ref={chatEndRef} />\r\n      </Box>\r\n      \r\n      {/* Input area */}\r\n      <Box sx={{ display: 'flex', mt: 2 }}>\r\n        <TextField\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder={`Type your question in any Indian language...`}\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSend()}\r\n        />\r\n        <IconButton \r\n          color={isRecording ? \"secondary\" : \"primary\"}\r\n          onClick={isRecording ? stopRecording : startRecording}\r\n        >\r\n          <MicIcon />\r\n        </IconButton>\r\n        <Button \r\n          variant=\"contained\" \r\n          endIcon={<SendIcon />} \r\n          onClick={handleSend}\r\n          disabled={isLoading || message.trim() === ''}\r\n        >\r\n          Send\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,GAAG,EAAEC,SAAS,EAAEC,MAAM,EAAEC,UAAU,EAAEC,KAAK,EAAEC,UAAU,QAAQ,eAAe;AACrF,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,YAAY,QAAQ,6BAA6B;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMyB,UAAU,GAAGvB,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMwB,gBAAgB,GAAGxB,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMyB,cAAc,GAAGzB,MAAM,CAAC,EAAE,CAAC;EAEjC,MAAM;IACJ0B,eAAe;IACfC,mBAAmB;IACnBC,kBAAkB;IAClBC;EACF,CAAC,GAAGpB,WAAW,CAAC,CAAC;EAEjBV,SAAS,CAAC,MAAM;IAAA,IAAA+B,mBAAA;IACd,CAAAA,mBAAA,GAAAP,UAAU,CAACQ,OAAO,cAAAD,mBAAA,uBAAlBA,mBAAA,CAAoBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAC5D,CAAC,EAAE,CAAChB,IAAI,CAAC,CAAC;EAEV,MAAMiB,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAInB,OAAO,CAACoB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;IAE3B;IACAjB,OAAO,CAACkB,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAE;MAAEC,IAAI,EAAEtB,OAAO;MAAEuB,MAAM,EAAE;IAAO,CAAC,CAAC,CAAC;IACrE,MAAMC,SAAS,GAAGxB,OAAO;IACzBC,UAAU,CAAC,EAAE,CAAC;IACdI,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACA,MAAMoB,YAAY,GAAG,MAAMb,mBAAmB,CAACY,SAAS,CAAC;;MAEzD;MACA,MAAME,eAAe,GAAG,MAAMb,kBAAkB,CAC9CW,SAAS,EACTC,YAAY,IAAId,eAClB,CAAC;;MAED;MACA,MAAMgB,QAAQ,GAAG,MAAMC,YAAY,CAACF,eAAe,CAAC;;MAEpD;MACA,MAAMG,kBAAkB,GAAG,MAAMf,oBAAoB,CACnDa,QAAQ,EACRF,YAAY,IAAId,eAClB,CAAC;;MAED;MACAR,OAAO,CAACkB,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAE;QAChCC,IAAI,EAAEO,kBAAkB;QACxBN,MAAM,EAAE,KAAK;QACbO,gBAAgB,EAAEL,YAAY,IAAId;MACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD5B,OAAO,CAACkB,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAE;QAChCC,IAAI,EAAE,wDAAwD;QAC9DC,MAAM,EAAE,KAAK;QACbQ,KAAK,EAAE;MACT,CAAC,CAAC,CAAC;IACL,CAAC,SAAS;MACR1B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMuB,YAAY,GAAG,MAAON,IAAI,IAAK;IACnC;IACA,MAAMK,QAAQ,GAAG,MAAMM,KAAK,CAAC,YAAY,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,KAAK,EAAEjB;MAAK,CAAC;IACtC,CAAC,CAAC;IAEF,IAAI,CAACK,QAAQ,CAACa,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAMC,IAAI,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACf,QAAQ;EACtB,CAAC;EAED,MAAMiB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzExC,gBAAgB,CAACO,OAAO,GAAG,IAAIkC,aAAa,CAACL,MAAM,CAAC;MACpDnC,cAAc,CAACM,OAAO,GAAG,EAAE;MAE3BP,gBAAgB,CAACO,OAAO,CAACmC,eAAe,GAAIC,KAAK,IAAK;QACpD,IAAIA,KAAK,CAACV,IAAI,CAACW,IAAI,GAAG,CAAC,EAAE;UACvB3C,cAAc,CAACM,OAAO,CAACsC,IAAI,CAACF,KAAK,CAACV,IAAI,CAAC;QACzC;MACF,CAAC;MAEDjC,gBAAgB,CAACO,OAAO,CAACuC,MAAM,GAAG,YAAY;QAC5C,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC/C,cAAc,CAACM,OAAO,EAAE;UAAE0C,IAAI,EAAE;QAAY,CAAC,CAAC;QACzE,MAAMpC,IAAI,GAAG,MAAM3B,YAAY,CAAC6D,SAAS,EAAE7C,eAAe,CAAC;QAC3D,IAAIW,IAAI,EAAE;UACRrB,UAAU,CAACqB,IAAI,CAAC;QAClB;MACF,CAAC;MAEDb,gBAAgB,CAACO,OAAO,CAAC2C,KAAK,CAAC,CAAC;MAChCpD,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAM6B,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAInD,gBAAgB,CAACO,OAAO,IAAIP,gBAAgB,CAACO,OAAO,CAAC6C,KAAK,KAAK,UAAU,EAAE;MAC7EpD,gBAAgB,CAACO,OAAO,CAAC8C,IAAI,CAAC,CAAC;MAC/BrD,gBAAgB,CAACO,OAAO,CAAC6B,MAAM,CAACkB,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC;MAC1EvD,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;;EAED;EACA;;EAEA,oBACEV,OAAA,CAACX,GAAG;IAACgF,EAAE,EAAE,CAAE,kBAAoB;IAAAC,QAAA,gBAE7BtE,OAAA,CAACX,GAAG;MAACgF,EAAE,EAAE,CAAE,4BAA8B;MAAAC,QAAA,GACtCjE,IAAI,CAACkE,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACnBzE,OAAA,CAACP,KAAK;QAEJiF,SAAS,EAAE,CAAE;QACbL,EAAE,EAAE;UACF;UACAM,OAAO,EAAEH,GAAG,CAAC9C,MAAM,KAAK,MAAM,GAAG,eAAe,GAAG,kBAAkB;UACrEkD,SAAS,EAAEJ,GAAG,CAAC9C,MAAM,KAAK,MAAM,GAAG,UAAU,GAAG;QAClD,CAAE;QAAA4C,QAAA,gBAEFtE,OAAA,CAACR,UAAU;UAAA8E,QAAA,EAAEE,GAAG,CAAC/C;QAAI;UAAAoD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAAC,EAClCR,GAAG,CAACvC,gBAAgB,IAAIuC,GAAG,CAACvC,gBAAgB,KAAK,IAAI,iBACpDjC,OAAA,CAACR,UAAU;UAACyF,OAAO,EAAC,SAAS;UAACZ,EAAE,EAAE;YAAEa,OAAO,EAAE;UAAI,CAAE;UAAAZ,QAAA,GAAC,kBAClC,EAACE,GAAG,CAACvC,gBAAgB;QAAA;UAAA4C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CACb;MAAA,GAbIP,KAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcL,CACR,CAAC,EACDzE,SAAS,iBAAIP,OAAA,CAACR,UAAU;QAAA8E,QAAA,EAAC;MAA0B;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACjEhF,OAAA;QAAKmF,GAAG,EAAExE;MAAW;QAAAkE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,eAGNhF,OAAA,CAACX,GAAG;MAACgF,EAAE,EAAE;QAAEe,OAAO,EAAE,MAAM;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAf,QAAA,gBAClCtE,OAAA,CAACV,SAAS;QACRgG,SAAS;QACTL,OAAO,EAAC,UAAU;QAClBM,KAAK,EAAEpF,OAAQ;QACfqF,QAAQ,EAAGC,CAAC,IAAKrF,UAAU,CAACqF,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC5CI,WAAW,EAAE,8CAA+C;QAC5DC,UAAU,EAAGH,CAAC,IAAKA,CAAC,CAACI,GAAG,KAAK,OAAO,IAAIvE,UAAU,CAAC;MAAE;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC,eACFhF,OAAA,CAACN,UAAU;QACToG,KAAK,EAAErF,WAAW,GAAG,WAAW,GAAG,SAAU;QAC7CsF,OAAO,EAAEtF,WAAW,GAAGsD,aAAa,GAAGhB,cAAe;QAAAuB,QAAA,eAEtDtE,OAAA,CAACJ,OAAO;UAAAiF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACbhF,OAAA,CAACT,MAAM;QACL0F,OAAO,EAAC,WAAW;QACnBe,OAAO,eAAEhG,OAAA,CAACL,QAAQ;UAAAkF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAE;QACtBe,OAAO,EAAEzE,UAAW;QACpB2E,QAAQ,EAAE1F,SAAS,IAAIJ,OAAO,CAACoB,IAAI,CAAC,CAAC,KAAK,EAAG;QAAA+C,QAAA,EAC9C;MAED;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC9E,EAAA,CA/KQD,IAAI;EAAA,QAcPJ,WAAW;AAAA;AAAAqG,EAAA,GAdRjG,IAAI;AAiLb,eAAeA,IAAI;AAAC,IAAAiG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}