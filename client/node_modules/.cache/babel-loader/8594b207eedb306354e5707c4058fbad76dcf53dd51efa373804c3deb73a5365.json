{"ast":null,"code":"import axios from 'axios';\n\n// Function to detect language of input text using IndicBERT\nexport const detectLanguage = async text => {\n  // If you have a backend API for IndicBERT, you would call that here\n  try {\n    // Replace with your actual API endpoint for language detection\n    const response = await axios.post('/api/language/detect', {\n      text\n    });\n    return response.data.languageCode;\n  } catch (error) {\n    console.error('Language detection error:', error);\n    return 'en'; // Default to English on error\n  }\n};\n\n// Function to translate text between languages using IndicBERT\nexport const translateText = async (text, sourceLanguage, targetLanguage) => {\n  try {\n    // Replace with your actual API endpoint for translation\n    const response = await axios.post('/api/language/translate', {\n      text,\n      sourceLanguage,\n      targetLanguage\n    });\n    return response.data.translatedText;\n  } catch (error) {\n    console.error('Translation error:', error);\n    return text; // Return original text on error\n  }\n};\n\n// Function for speech-to-text using Whisper (optional)\nexport const speechToText = async (audioBlob, language = 'en') => {\n  try {\n    const formData = new FormData();\n    formData.append('audio', audioBlob);\n    formData.append('language', language);\n\n    // Replace with your actual API endpoint for speech-to-text\n    const response = await axios.post('/api/speech/transcribe', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.text;\n  } catch (error) {\n    console.error('Speech-to-text error:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","detectLanguage","text","response","post","data","languageCode","error","console","translateText","sourceLanguage","targetLanguage","translatedText","speechToText","audioBlob","language","formData","FormData","append","headers"],"sources":["D:/Legal Assistant for Indian Laws/client/src/services/languageService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Function to detect language of input text using IndicBERT\r\nexport const detectLanguage = async (text) => {\r\n  // If you have a backend API for IndicBERT, you would call that here\r\n  try {\r\n    // Replace with your actual API endpoint for language detection\r\n    const response = await axios.post('/api/language/detect', { text });\r\n    return response.data.languageCode;\r\n  } catch (error) {\r\n    console.error('Language detection error:', error);\r\n    return 'en'; // Default to English on error\r\n  }\r\n};\r\n\r\n// Function to translate text between languages using IndicBERT\r\nexport const translateText = async (text, sourceLanguage, targetLanguage) => {\r\n  try {\r\n    // Replace with your actual API endpoint for translation\r\n    const response = await axios.post('/api/language/translate', {\r\n      text,\r\n      sourceLanguage,\r\n      targetLanguage\r\n    });\r\n    return response.data.translatedText;\r\n  } catch (error) {\r\n    console.error('Translation error:', error);\r\n    return text; // Return original text on error\r\n  }\r\n};\r\n\r\n// Function for speech-to-text using Whisper (optional)\r\nexport const speechToText = async (audioBlob, language = 'en') => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('audio', audioBlob);\r\n    formData.append('language', language);\r\n    \r\n    // Replace with your actual API endpoint for speech-to-text\r\n    const response = await axios.post('/api/speech/transcribe', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    \r\n    return response.data.text;\r\n  } catch (error) {\r\n    console.error('Speech-to-text error:', error);\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,IAAI,IAAK;EAC5C;EACA,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAI,CAAC,sBAAsB,EAAE;MAAEF;IAAK,CAAC,CAAC;IACnE,OAAOC,QAAQ,CAACE,IAAI,CAACC,YAAY;EACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOP,IAAI,EAAEQ,cAAc,EAAEC,cAAc,KAAK;EAC3E,IAAI;IACF;IACA,MAAMR,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAI,CAAC,yBAAyB,EAAE;MAC3DF,IAAI;MACJQ,cAAc;MACdC;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACE,IAAI,CAACO,cAAc;EACrC,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAOL,IAAI,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,YAAY,GAAG,MAAAA,CAAOC,SAAS,EAAEC,QAAQ,GAAG,IAAI,KAAK;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,SAAS,CAAC;IACnCE,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC;;IAErC;IACA,MAAMZ,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAI,CAAC,wBAAwB,EAAEY,QAAQ,EAAE;MACpEG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,OAAOhB,QAAQ,CAACE,IAAI,CAACH,IAAI;EAC3B,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}