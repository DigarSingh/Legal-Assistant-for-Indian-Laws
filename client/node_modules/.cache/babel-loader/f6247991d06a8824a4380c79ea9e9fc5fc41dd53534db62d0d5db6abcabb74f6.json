{"ast":null,"code":"var _jsxFileName = \"D:\\\\Legal Assistant for Indian Laws\\\\client\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, TextField, Button, Typography, Paper, IconButton } from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport MicIcon from '@mui/icons-material/Mic';\nimport { useLanguage } from '../contexts/LanguageContext';\nimport { speechToText } from '../services/languageService';\nimport { extractCitationReferences, enhanceTextWithCitations } from '../services/citationService';\nimport CitationDisplay from './CitationDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const chatEndRef = useRef(null);\n  const {\n    currentLanguage,\n    detectInputLanguage,\n    translateToEnglish,\n    translateFromEnglish\n  } = useLanguage();\n  const handleSend = async () => {\n    if (message.trim() === '') return;\n\n    // Add user message to chat\n    setChat(prevChat => [...prevChat, {\n      text: message,\n      sender: 'user'\n    }]);\n    const userInput = message;\n    setMessage('');\n    setIsLoading(true);\n    try {\n      // Detect language if needed\n      const detectedLang = await detectInputLanguage(userInput);\n\n      // Translate to English for processing\n      const translatedQuery = await translateToEnglish(userInput, detectedLang || currentLanguage);\n\n      // Send to backend API\n      const response = await processQuery(translatedQuery);\n\n      // Extract citation references from the response\n      const citationRefs = extractCitationReferences(response);\n\n      // Enhance text with citation markers\n      const {\n        enhancedText,\n        citations\n      } = enhanceTextWithCitations(response, citationRefs);\n\n      // Translate response back to user's language\n      const translatedResponse = await translateFromEnglish(enhancedText, detectedLang || currentLanguage);\n\n      // Add response to chat with citations\n      setChat(prevChat => [...prevChat, {\n        text: translatedResponse,\n        sender: 'bot',\n        originalLanguage: detectedLang || currentLanguage,\n        citations: citations\n      }]);\n    } catch (error) {\n      console.error('Error processing message:', error);\n      setChat(prevChat => [...prevChat, {\n        text: 'Sorry, I encountered an error processing your request.',\n        sender: 'bot',\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSpeechInput = async () => {\n    try {\n      const speechText = await speechToText();\n      setMessage(speechText);\n    } catch (error) {\n      console.error('Error with speech input:', error);\n    }\n  };\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chat]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        overflowY: 'auto',\n        p: 2\n      },\n      children: [chat.map((msg, index) => /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 1,\n        sx: {\n          bgcolor: msg.sender === 'user' ? 'primary.light' : 'background.paper',\n          alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\n          p: 2,\n          my: 1,\n          maxWidth: '80%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), msg.originalLanguage && msg.originalLanguage !== 'en' && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          sx: {\n            opacity: 0.7,\n            display: 'block',\n            mt: 1\n          },\n          children: [\"Translated from \", msg.originalLanguage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this), msg.citations && msg.citations.length > 0 && /*#__PURE__*/_jsxDEV(CitationDisplay, {\n          citations: msg.citations\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Processing your request...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type your message...\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleSpeechInput,\n        sx: {\n          ml: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSend,\n        sx: {\n          ml: 1\n        },\n        endIcon: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 20\n        }, this),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"7iXXecEOquoUPLHDuhoqmKM/7ns=\", false, function () {\n  return [useLanguage];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","TextField","Button","Typography","Paper","IconButton","SendIcon","MicIcon","useLanguage","speechToText","extractCitationReferences","enhanceTextWithCitations","CitationDisplay","jsxDEV","_jsxDEV","Chat","_s","message","setMessage","chat","setChat","isLoading","setIsLoading","chatEndRef","currentLanguage","detectInputLanguage","translateToEnglish","translateFromEnglish","handleSend","trim","prevChat","text","sender","userInput","detectedLang","translatedQuery","response","processQuery","citationRefs","enhancedText","citations","translatedResponse","originalLanguage","error","console","handleSpeechInput","speechText","_chatEndRef$current","current","scrollIntoView","behavior","sx","display","flexDirection","height","children","flex","overflowY","p","map","msg","index","elevation","bgcolor","alignSelf","my","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","variant","opacity","mt","length","ref","alignItems","fullWidth","value","onChange","e","target","placeholder","onClick","ml","color","endIcon","_c","$RefreshReg$"],"sources":["D:/Legal Assistant for Indian Laws/client/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Box, TextField, Button, Typography, Paper, IconButton } from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport MicIcon from '@mui/icons-material/Mic';\r\nimport { useLanguage } from '../contexts/LanguageContext';\r\nimport { speechToText } from '../services/languageService';\r\nimport { extractCitationReferences, enhanceTextWithCitations } from '../services/citationService';\r\nimport CitationDisplay from './CitationDisplay';\r\n\r\nfunction Chat() {\r\n  const [message, setMessage] = useState('');\r\n  const [chat, setChat] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const chatEndRef = useRef(null);\r\n  const { currentLanguage, detectInputLanguage, translateToEnglish, translateFromEnglish } = useLanguage();\r\n\r\n  const handleSend = async () => {\r\n    if (message.trim() === '') return;\r\n\r\n    // Add user message to chat\r\n    setChat(prevChat => [...prevChat, { text: message, sender: 'user' }]);\r\n    const userInput = message;\r\n    setMessage('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Detect language if needed\r\n      const detectedLang = await detectInputLanguage(userInput);\r\n\r\n      // Translate to English for processing\r\n      const translatedQuery = await translateToEnglish(\r\n        userInput,\r\n        detectedLang || currentLanguage\r\n      );\r\n\r\n      // Send to backend API\r\n      const response = await processQuery(translatedQuery);\r\n\r\n      // Extract citation references from the response\r\n      const citationRefs = extractCitationReferences(response);\r\n\r\n      // Enhance text with citation markers\r\n      const { enhancedText, citations } = enhanceTextWithCitations(response, citationRefs);\r\n\r\n      // Translate response back to user's language\r\n      const translatedResponse = await translateFromEnglish(\r\n        enhancedText,\r\n        detectedLang || currentLanguage\r\n      );\r\n\r\n      // Add response to chat with citations\r\n      setChat(prevChat => [...prevChat, {\r\n        text: translatedResponse,\r\n        sender: 'bot',\r\n        originalLanguage: detectedLang || currentLanguage,\r\n        citations: citations\r\n      }]);\r\n    } catch (error) {\r\n      console.error('Error processing message:', error);\r\n      setChat(prevChat => [...prevChat, {\r\n        text: 'Sorry, I encountered an error processing your request.',\r\n        sender: 'bot',\r\n        error: true\r\n      }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSpeechInput = async () => {\r\n    try {\r\n      const speechText = await speechToText();\r\n      setMessage(speechText);\r\n    } catch (error) {\r\n      console.error('Error with speech input:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [chat]);\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\r\n      {/* Chat messages display */}\r\n      <Box sx={{ flex: 1, overflowY: 'auto', p: 2 }}>\r\n        {chat.map((msg, index) => (\r\n          <Paper\r\n            key={index}\r\n            elevation={1}\r\n            sx={{\r\n              bgcolor: msg.sender === 'user' ? 'primary.light' : 'background.paper',\r\n              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n              p: 2,\r\n              my: 1,\r\n              maxWidth: '80%'\r\n            }}\r\n          >\r\n            <Typography>{msg.text}</Typography>\r\n\r\n            {msg.originalLanguage && msg.originalLanguage !== 'en' && (\r\n              <Typography variant=\"caption\" sx={{ opacity: 0.7, display: 'block', mt: 1 }}>\r\n                Translated from {msg.originalLanguage}\r\n              </Typography>\r\n            )}\r\n\r\n            {msg.citations && msg.citations.length > 0 && (\r\n              <CitationDisplay citations={msg.citations} />\r\n            )}\r\n          </Paper>\r\n        ))}\r\n        {isLoading && <Typography>Processing your request...</Typography>}\r\n        <div ref={chatEndRef} />\r\n      </Box>\r\n\r\n      {/* Input area */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', p: 2 }}>\r\n        <TextField\r\n          fullWidth\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          variant=\"outlined\"\r\n        />\r\n        <IconButton onClick={handleSpeechInput} sx={{ ml: 1 }}>\r\n          <MicIcon />\r\n        </IconButton>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleSend}\r\n          sx={{ ml: 1 }}\r\n          endIcon={<SendIcon />}\r\n        >\r\n          Send\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}