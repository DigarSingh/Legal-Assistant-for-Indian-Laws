{"ast":null,"code":"var _jsxFileName = \"D:\\\\Legal Assistant for Indian Laws\\\\client\\\\src\\\\contexts\\\\LanguageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { detectLanguage, translateText } from '../services/languageService';\n\n// Supported Indian languages\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SUPPORTED_LANGUAGES = [{\n  code: 'en',\n  name: 'English',\n  nativeName: 'English'\n}, {\n  code: 'hi',\n  name: 'Hindi',\n  nativeName: 'हिन्दी'\n}, {\n  code: 'bn',\n  name: 'Bengali',\n  nativeName: 'বাংলা'\n}, {\n  code: 'ta',\n  name: 'Tamil',\n  nativeName: 'தமிழ்'\n}, {\n  code: 'te',\n  name: 'Telugu',\n  nativeName: 'తెలుగు'\n}, {\n  code: 'kn',\n  name: 'Kannada',\n  nativeName: 'ಕನ್ನಡ'\n}, {\n  code: 'ml',\n  name: 'Malayalam',\n  nativeName: 'മലയാളം'\n}, {\n  code: 'pa',\n  name: 'Punjabi',\n  nativeName: 'ਪੰਜਾਬੀ'\n}, {\n  code: 'gu',\n  name: 'Gujarati',\n  nativeName: 'ગુજરાતી'\n}, {\n  code: 'or',\n  name: 'Odia',\n  nativeName: 'ଓଡ଼ିଆ'\n}, {\n  code: 'mr',\n  name: 'Marathi',\n  nativeName: 'मराठी'\n}, {\n  code: 'as',\n  name: 'Assamese',\n  nativeName: 'অসমীয়া'\n}];\nconst LanguageContext = /*#__PURE__*/createContext();\nexport const useLanguage = () => {\n  _s();\n  return useContext(LanguageContext);\n};\n_s(useLanguage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s2();\n  // Default to English or browser language\n  const [currentLanguage, setCurrentLanguage] = useState(() => {\n    const savedLang = localStorage.getItem('preferredLanguage');\n    return savedLang || 'en';\n  });\n  const [autoDetect, setAutoDetect] = useState(true);\n  useEffect(() => {\n    localStorage.setItem('preferredLanguage', currentLanguage);\n  }, [currentLanguage]);\n\n  // Function to detect language of input text\n  const detectInputLanguage = async text => {\n    if (!autoDetect || !text || text.trim() === '') return null;\n    try {\n      const detectedLang = await detectLanguage(text);\n      return detectedLang;\n    } catch (error) {\n      console.error('Error detecting language:', error);\n      return null;\n    }\n  };\n\n  // Function to translate text to English for processing\n  const translateToEnglish = async (text, sourceLanguage = null) => {\n    if (!text || text.trim() === '' || sourceLanguage === 'en') return text;\n    const langToUse = sourceLanguage || currentLanguage;\n    if (langToUse === 'en') return text;\n    try {\n      const translatedText = await translateText(text, langToUse, 'en');\n      return translatedText;\n    } catch (error) {\n      console.error('Error translating to English:', error);\n      return text;\n    }\n  };\n\n  // Function to translate text from English to user's language\n  const translateFromEnglish = async (text, targetLanguage = null) => {\n    if (!text || text.trim() === '') return text;\n    const langToUse = targetLanguage || currentLanguage;\n    if (langToUse === 'en') return text;\n    try {\n      const translatedText = await translateText(text, 'en', langToUse);\n      return translatedText;\n    } catch (error) {\n      console.error('Error translating from English:', error);\n      return text;\n    }\n  };\n  const value = {\n    currentLanguage,\n    setCurrentLanguage,\n    autoDetect,\n    setAutoDetect,\n    detectInputLanguage,\n    translateToEnglish,\n    translateFromEnglish,\n    supportedLanguages: SUPPORTED_LANGUAGES\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s2(LanguageProvider, \"VhDzCaVZWIIZqR9Oklu3DIUSDkE=\");\n_c = LanguageProvider;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","detectLanguage","translateText","jsxDEV","_jsxDEV","SUPPORTED_LANGUAGES","code","name","nativeName","LanguageContext","useLanguage","_s","LanguageProvider","children","_s2","currentLanguage","setCurrentLanguage","savedLang","localStorage","getItem","autoDetect","setAutoDetect","setItem","detectInputLanguage","text","trim","detectedLang","error","console","translateToEnglish","sourceLanguage","langToUse","translatedText","translateFromEnglish","targetLanguage","value","supportedLanguages","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Legal Assistant for Indian Laws/client/src/contexts/LanguageContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { detectLanguage, translateText } from '../services/languageService';\r\n\r\n// Supported Indian languages\r\nexport const SUPPORTED_LANGUAGES = [\r\n  { code: 'en', name: 'English', nativeName: 'English' },\r\n  { code: 'hi', name: 'Hindi', nativeName: 'हिन्दी' },\r\n  { code: 'bn', name: 'Bengali', nativeName: 'বাংলা' },\r\n  { code: 'ta', name: 'Tamil', nativeName: 'தமிழ்' },\r\n  { code: 'te', name: 'Telugu', nativeName: 'తెలుగు' },\r\n  { code: 'kn', name: 'Kannada', nativeName: 'ಕನ್ನಡ' },\r\n  { code: 'ml', name: 'Malayalam', nativeName: 'മലയാളം' },\r\n  { code: 'pa', name: 'Punjabi', nativeName: 'ਪੰਜਾਬੀ' },\r\n  { code: 'gu', name: 'Gujarati', nativeName: 'ગુજરાતી' },\r\n  { code: 'or', name: 'Odia', nativeName: 'ଓଡ଼ିଆ' },\r\n  { code: 'mr', name: 'Marathi', nativeName: 'मराठी' },\r\n  { code: 'as', name: 'Assamese', nativeName: 'অসমীয়া' },\r\n];\r\n\r\nconst LanguageContext = createContext();\r\n\r\nexport const useLanguage = () => useContext(LanguageContext);\r\n\r\nexport const LanguageProvider = ({ children }) => {\r\n  // Default to English or browser language\r\n  const [currentLanguage, setCurrentLanguage] = useState(() => {\r\n    const savedLang = localStorage.getItem('preferredLanguage');\r\n    return savedLang || 'en';\r\n  });\r\n  \r\n  const [autoDetect, setAutoDetect] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    localStorage.setItem('preferredLanguage', currentLanguage);\r\n  }, [currentLanguage]);\r\n  \r\n  // Function to detect language of input text\r\n  const detectInputLanguage = async (text) => {\r\n    if (!autoDetect || !text || text.trim() === '') return null;\r\n    try {\r\n      const detectedLang = await detectLanguage(text);\r\n      return detectedLang;\r\n    } catch (error) {\r\n      console.error('Error detecting language:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Function to translate text to English for processing\r\n  const translateToEnglish = async (text, sourceLanguage = null) => {\r\n    if (!text || text.trim() === '' || sourceLanguage === 'en') return text;\r\n    \r\n    const langToUse = sourceLanguage || currentLanguage;\r\n    if (langToUse === 'en') return text;\r\n    \r\n    try {\r\n      const translatedText = await translateText(text, langToUse, 'en');\r\n      return translatedText;\r\n    } catch (error) {\r\n      console.error('Error translating to English:', error);\r\n      return text;\r\n    }\r\n  };\r\n  \r\n  // Function to translate text from English to user's language\r\n  const translateFromEnglish = async (text, targetLanguage = null) => {\r\n    if (!text || text.trim() === '') return text;\r\n    \r\n    const langToUse = targetLanguage || currentLanguage;\r\n    if (langToUse === 'en') return text;\r\n    \r\n    try {\r\n      const translatedText = await translateText(text, 'en', langToUse);\r\n      return translatedText;\r\n    } catch (error) {\r\n      console.error('Error translating from English:', error);\r\n      return text;\r\n    }\r\n  };\r\n  \r\n  const value = {\r\n    currentLanguage,\r\n    setCurrentLanguage,\r\n    autoDetect,\r\n    setAutoDetect,\r\n    detectInputLanguage,\r\n    translateToEnglish,\r\n    translateFromEnglish,\r\n    supportedLanguages: SUPPORTED_LANGUAGES\r\n  };\r\n  \r\n  return (\r\n    <LanguageContext.Provider value={value}>\r\n      {children}\r\n    </LanguageContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}