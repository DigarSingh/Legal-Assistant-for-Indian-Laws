{"ast":null,"code":"/**\r\n * Analytics Service\r\n * Handles tracking and retrieving analytics data for legal research\r\n */\n\n// Initialize analytics storage in localStorage if it doesn't exist\nconst initAnalyticsStorage = () => {\n  if (!localStorage.getItem('legalAssistantAnalytics')) {\n    localStorage.setItem('legalAssistantAnalytics', JSON.stringify({\n      queries: [],\n      sessions: []\n    }));\n  }\n};\n\n// Track a new query\nexport const trackQuery = queryData => {\n  initAnalyticsStorage();\n  try {\n    const analytics = JSON.parse(localStorage.getItem('legalAssistantAnalytics'));\n\n    // Add query to analytics\n    analytics.queries.push({\n      ...queryData,\n      id: `q-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    });\n\n    // Store back to localStorage\n    localStorage.setItem('legalAssistantAnalytics', JSON.stringify(analytics));\n\n    // If we have a backend API, we would also send the data there\n    // sendToAnalyticsAPI(queryData);\n\n    return true;\n  } catch (error) {\n    console.error('Error tracking query:', error);\n    return false;\n  }\n};\n\n// Track user session\nexport const trackSession = sessionData => {\n  initAnalyticsStorage();\n  try {\n    const analytics = JSON.parse(localStorage.getItem('legalAssistantAnalytics'));\n\n    // Add session to analytics\n    analytics.sessions.push({\n      ...sessionData,\n      id: `s-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    });\n\n    // Store back to localStorage\n    localStorage.setItem('legalAssistantAnalytics', JSON.stringify(analytics));\n    return true;\n  } catch (error) {\n    console.error('Error tracking session:', error);\n    return false;\n  }\n};\n\n// Get all analytics data filtered by time range\nexport const getAnalytics = async (timeRange = 'week') => {\n  initAnalyticsStorage();\n  try {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 800));\n    const analytics = JSON.parse(localStorage.getItem('legalAssistantAnalytics'));\n    const now = new Date();\n    let filterDate = new Date();\n\n    // Set filter date based on time range\n    if (timeRange === 'week') {\n      filterDate.setDate(now.getDate() - 7);\n    } else if (timeRange === 'month') {\n      filterDate.setDate(now.getDate() - 30);\n    } else if (timeRange === 'quarter') {\n      filterDate.setDate(now.getDate() - 90);\n    }\n\n    // Filter queries by date\n    const filteredQueries = analytics.queries.filter(query => {\n      const queryDate = new Date(query.timestamp);\n      return queryDate >= filterDate;\n    });\n\n    // Calculate analytics metrics\n    const totalQueries = filteredQueries.length;\n\n    // Calculate average response time\n    const totalResponseTime = filteredQueries.reduce((sum, query) => sum + (query.responseTime || 0), 0);\n    const avgResponseTime = totalQueries > 0 ? Math.round(totalResponseTime / totalQueries / 100) / 10 : 0;\n\n    // Find top category\n    const categories = {};\n    filteredQueries.forEach(query => {\n      const category = query.category || 'Unknown';\n      categories[category] = (categories[category] || 0) + 1;\n    });\n    let topCategory = 'N/A';\n    let maxCount = 0;\n    Object.entries(categories).forEach(([category, count]) => {\n      if (count > maxCount) {\n        maxCount = count;\n        topCategory = category;\n      }\n    });\n\n    // Count citations\n    const citationsCount = filteredQueries.reduce((sum, query) => sum + (query.citationsCount || 0), 0);\n    return {\n      totalQueries,\n      avgResponseTime,\n      topCategory,\n      citationsCount,\n      timeRange\n    };\n  } catch (error) {\n    console.error('Error getting analytics:', error);\n\n    // Return fallback data if there's an error\n    return {\n      totalQueries: 0,\n      avgResponseTime: 0,\n      topCategory: 'N/A',\n      citationsCount: 0,\n      timeRange\n    };\n  }\n};\n\n// Get top queries\nexport const getTopQueries = async (timeRange = 'week') => {\n  initAnalyticsStorage();\n  try {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 600));\n    const analytics = JSON.parse(localStorage.getItem('legalAssistantAnalytics'));\n    const now = new Date();\n    let filterDate = new Date();\n\n    // Set filter date based on time range\n    if (timeRange === 'week') {\n      filterDate.setDate(now.getDate() - 7);\n    } else if (timeRange === 'month') {\n      filterDate.setDate(now.getDate() - 30);\n    } else if (timeRange === 'quarter') {\n      filterDate.setDate(now.getDate() - 90);\n    }\n\n    // Filter queries by date\n    const filteredQueries = analytics.queries.filter(query => {\n      const queryDate = new Date(query.timestamp);\n      return queryDate >= filterDate;\n    });\n\n    // Group queries by text\n    const queryGroups = {};\n    filteredQueries.forEach(query => {\n      if (!query.query) return;\n      const queryText = query.query.toLowerCase().trim();\n      if (!queryGroups[queryText]) {\n        queryGroups[queryText] = {\n          text: query.query,\n          category: query.category || 'General Legal',\n          count: 0,\n          totalResponseTime: 0\n        };\n      }\n      queryGroups[queryText].count += 1;\n      queryGroups[queryText].totalResponseTime += query.responseTime || 0;\n    });\n\n    // Convert to array and sort by count\n    const topQueries = Object.values(queryGroups).map(group => ({\n      text: group.text,\n      category: group.category,\n      frequency: group.count,\n      avgResponseTime: group.count > 0 ? Math.round(group.totalResponseTime / group.count / 100) / 10 : 0\n    })).sort((a, b) => b.frequency - a.frequency).slice(0, 10);\n\n    // If we don't have enough real data, add some example queries\n    if (topQueries.length < 5) {\n      const exampleQueries = [{\n        text: \"What are the grounds for divorce in India?\",\n        category: \"Family Law\",\n        frequency: 15,\n        avgResponseTime: 2.3\n      }, {\n        text: \"How to file an FIR in India?\",\n        category: \"Criminal Law\",\n        frequency: 12,\n        avgResponseTime: 1.8\n      }, {\n        text: \"What is the process for property registration?\",\n        category: \"Property Law\",\n        frequency: 9,\n        avgResponseTime: 3.1\n      }, {\n        text: \"Rights of tenants under Rent Control Act\",\n        category: \"Property Law\",\n        frequency: 7,\n        avgResponseTime: 2.5\n      }, {\n        text: \"How to file a consumer complaint?\",\n        category: \"Consumer Protection\",\n        frequency: 6,\n        avgResponseTime: 1.7\n      }];\n\n      // Add example queries if we don't have real data\n      for (let i = 0; i < exampleQueries.length && topQueries.length < 5; i++) {\n        if (!topQueries.some(q => q.text === exampleQueries[i].text)) {\n          topQueries.push(exampleQueries[i]);\n        }\n      }\n    }\n    return topQueries;\n  } catch (error) {\n    console.error('Error getting top queries:', error);\n\n    // Return fallback data if there's an error\n    return [{\n      text: \"What are the grounds for divorce in India?\",\n      category: \"Family Law\",\n      frequency: 15,\n      avgResponseTime: 2.3\n    }, {\n      text: \"How to file an FIR in India?\",\n      category: \"Criminal Law\",\n      frequency: 12,\n      avgResponseTime: 1.8\n    }, {\n      text: \"What is the process for property registration?\",\n      category: \"Property Law\",\n      frequency: 9,\n      avgResponseTime: 3.1\n    }, {\n      text: \"Rights of tenants under Rent Control Act\",\n      category: \"Property Law\",\n      frequency: 7,\n      avgResponseTime: 2.5\n    }, {\n      text: \"How to file a consumer complaint?\",\n      category: \"Consumer Protection\",\n      frequency: 6,\n      avgResponseTime: 1.7\n    }];\n  }\n};\n\n// Get category breakdown\nexport const getCategoryBreakdown = async (timeRange = 'week') => {\n  initAnalyticsStorage();\n  try {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 700));\n    const analytics = JSON.parse(localStorage.getItem('legalAssistantAnalytics'));\n    const now = new Date();\n    let filterDate = new Date();\n\n    // Set filter date based on time range\n    if (timeRange === 'week') {\n      filterDate.setDate(now.getDate() - 7);\n    } else if (timeRange === 'month') {\n      filterDate.setDate(now.getDate() - 30);\n    } else if (timeRange === 'quarter') {\n      filterDate.setDate(now.getDate() - 90);\n    }\n\n    // Filter queries by date\n    const filteredQueries = analytics.queries.filter(query => {\n      const queryDate = new Date(query.timestamp);\n      return queryDate >= filterDate;\n    });\n\n    // Count categories\n    const categories = {};\n    filteredQueries.forEach(query => {\n      const category = query.category || 'Other';\n      categories[category] = (categories[category] || 0) + 1;\n    });\n\n    // Convert to array for chart\n    const categoryData = Object.entries(categories).map(([name, value]) => ({\n      name,\n      value\n    })).sort((a, b) => b.value - a.value);\n\n    // If we don't have real data, use fallbacks\n    if (categoryData.length === 0) {\n      return [{\n        name: 'Family Law',\n        value: 35\n      }, {\n        name: 'Property Law',\n        value: 25\n      }, {\n        name: 'Criminal Law',\n        value: 18\n      }, {\n        name: 'Consumer Protection',\n        value: 12\n      }, {\n        name: 'Constitutional Law',\n        value: 8\n      }, {\n        name: 'Corporate Law',\n        value: 5\n      }, {\n        name: 'Other',\n        value: 7\n      }];\n    }\n    return categoryData;\n  } catch (error) {\n    console.error('Error getting category breakdown:', error);\n\n    // Return fallback data if there's an error\n    return [{\n      name: 'Family Law',\n      value: 35\n    }, {\n      name: 'Property Law',\n      value: 25\n    }, {\n      name: 'Criminal Law',\n      value: 18\n    }, {\n      name: 'Consumer Protection',\n      value: 12\n    }, {\n      name: 'Constitutional Law',\n      value: 8\n    }, {\n      name: 'Corporate Law',\n      value: 5\n    }, {\n      name: 'Other',\n      value: 7\n    }];\n  }\n};\n\n// Clear analytics data\nexport const clearAnalytics = () => {\n  try {\n    localStorage.removeItem('legalAssistantAnalytics');\n    initAnalyticsStorage();\n    return true;\n  } catch (error) {\n    console.error('Error clearing analytics:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["initAnalyticsStorage","localStorage","getItem","setItem","JSON","stringify","queries","sessions","trackQuery","queryData","analytics","parse","push","id","Date","now","Math","random","toString","substr","error","console","trackSession","sessionData","getAnalytics","timeRange","Promise","resolve","setTimeout","filterDate","setDate","getDate","filteredQueries","filter","query","queryDate","timestamp","totalQueries","length","totalResponseTime","reduce","sum","responseTime","avgResponseTime","round","categories","forEach","category","topCategory","maxCount","Object","entries","count","citationsCount","getTopQueries","queryGroups","queryText","toLowerCase","trim","text","topQueries","values","map","group","frequency","sort","a","b","slice","exampleQueries","i","some","q","getCategoryBreakdown","categoryData","name","value","clearAnalytics","removeItem"],"sources":["D:/Legal Assistant for Indian Laws/client/src/services/analyticsService.js"],"sourcesContent":["/**\r\n * Analytics Service\r\n * Handles tracking and retrieving analytics data for legal research\r\n */\r\n\r\n// Initialize analytics storage in localStorage if it doesn't exist\r\nconst initAnalyticsStorage = () => {\r\n  if (!localStorage.getItem('legalAssistantAnalytics')) {\r\n    localStorage.setItem('legalAssistantAnalytics', JSON.stringify({\r\n      queries: [],\r\n      sessions: []\r\n    }));\r\n  }\r\n};\r\n\r\n// Track a new query\r\nexport const trackQuery = (queryData) => {\r\n  initAnalyticsStorage();\r\n  \r\n  try {\r\n    const analytics = JSON.parse(localStorage.getItem('legalAssistantAnalytics'));\r\n    \r\n    // Add query to analytics\r\n    analytics.queries.push({\r\n      ...queryData,\r\n      id: `q-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n    });\r\n    \r\n    // Store back to localStorage\r\n    localStorage.setItem('legalAssistantAnalytics', JSON.stringify(analytics));\r\n    \r\n    // If we have a backend API, we would also send the data there\r\n    // sendToAnalyticsAPI(queryData);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error tracking query:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Track user session\r\nexport const trackSession = (sessionData) => {\r\n  initAnalyticsStorage();\r\n  \r\n  try {\r\n    const analytics = JSON.parse(localStorage.getItem('legalAssistantAnalytics'));\r\n    \r\n    // Add session to analytics\r\n    analytics.sessions.push({\r\n      ...sessionData,\r\n      id: `s-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n    });\r\n    \r\n    // Store back to localStorage\r\n    localStorage.setItem('legalAssistantAnalytics', JSON.stringify(analytics));\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error tracking session:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get all analytics data filtered by time range\r\nexport const getAnalytics = async (timeRange = 'week') => {\r\n  initAnalyticsStorage();\r\n  \r\n  try {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 800));\r\n    \r\n    const analytics = JSON.parse(localStorage.getItem('legalAssistantAnalytics'));\r\n    const now = new Date();\r\n    let filterDate = new Date();\r\n    \r\n    // Set filter date based on time range\r\n    if (timeRange === 'week') {\r\n      filterDate.setDate(now.getDate() - 7);\r\n    } else if (timeRange === 'month') {\r\n      filterDate.setDate(now.getDate() - 30);\r\n    } else if (timeRange === 'quarter') {\r\n      filterDate.setDate(now.getDate() - 90);\r\n    }\r\n    \r\n    // Filter queries by date\r\n    const filteredQueries = analytics.queries.filter(query => {\r\n      const queryDate = new Date(query.timestamp);\r\n      return queryDate >= filterDate;\r\n    });\r\n    \r\n    // Calculate analytics metrics\r\n    const totalQueries = filteredQueries.length;\r\n    \r\n    // Calculate average response time\r\n    const totalResponseTime = filteredQueries.reduce(\r\n      (sum, query) => sum + (query.responseTime || 0), 0\r\n    );\r\n    const avgResponseTime = totalQueries > 0 \r\n      ? Math.round((totalResponseTime / totalQueries) / 100) / 10\r\n      : 0;\r\n    \r\n    // Find top category\r\n    const categories = {};\r\n    filteredQueries.forEach(query => {\r\n      const category = query.category || 'Unknown';\r\n      categories[category] = (categories[category] || 0) + 1;\r\n    });\r\n    \r\n    let topCategory = 'N/A';\r\n    let maxCount = 0;\r\n    Object.entries(categories).forEach(([category, count]) => {\r\n      if (count > maxCount) {\r\n        maxCount = count;\r\n        topCategory = category;\r\n      }\r\n    });\r\n    \r\n    // Count citations\r\n    const citationsCount = filteredQueries.reduce(\r\n      (sum, query) => sum + (query.citationsCount || 0), 0\r\n    );\r\n    \r\n    return {\r\n      totalQueries,\r\n      avgResponseTime,\r\n      topCategory,\r\n      citationsCount,\r\n      timeRange\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting analytics:', error);\r\n    \r\n    // Return fallback data if there's an error\r\n    return {\r\n      totalQueries: 0,\r\n      avgResponseTime: 0,\r\n      topCategory: 'N/A',\r\n      citationsCount: 0,\r\n      timeRange\r\n    };\r\n  }\r\n};\r\n\r\n// Get top queries\r\nexport const getTopQueries = async (timeRange = 'week') => {\r\n  initAnalyticsStorage();\r\n  \r\n  try {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 600));\r\n    \r\n    const analytics = JSON.parse(localStorage.getItem('legalAssistantAnalytics'));\r\n    const now = new Date();\r\n    let filterDate = new Date();\r\n    \r\n    // Set filter date based on time range\r\n    if (timeRange === 'week') {\r\n      filterDate.setDate(now.getDate() - 7);\r\n    } else if (timeRange === 'month') {\r\n      filterDate.setDate(now.getDate() - 30);\r\n    } else if (timeRange === 'quarter') {\r\n      filterDate.setDate(now.getDate() - 90);\r\n    }\r\n    \r\n    // Filter queries by date\r\n    const filteredQueries = analytics.queries.filter(query => {\r\n      const queryDate = new Date(query.timestamp);\r\n      return queryDate >= filterDate;\r\n    });\r\n    \r\n    // Group queries by text\r\n    const queryGroups = {};\r\n    filteredQueries.forEach(query => {\r\n      if (!query.query) return;\r\n      \r\n      const queryText = query.query.toLowerCase().trim();\r\n      if (!queryGroups[queryText]) {\r\n        queryGroups[queryText] = {\r\n          text: query.query,\r\n          category: query.category || 'General Legal',\r\n          count: 0,\r\n          totalResponseTime: 0\r\n        };\r\n      }\r\n      \r\n      queryGroups[queryText].count += 1;\r\n      queryGroups[queryText].totalResponseTime += (query.responseTime || 0);\r\n    });\r\n    \r\n    // Convert to array and sort by count\r\n    const topQueries = Object.values(queryGroups)\r\n      .map(group => ({\r\n        text: group.text,\r\n        category: group.category,\r\n        frequency: group.count,\r\n        avgResponseTime: group.count > 0 \r\n          ? Math.round((group.totalResponseTime / group.count) / 100) / 10\r\n          : 0\r\n      }))\r\n      .sort((a, b) => b.frequency - a.frequency)\r\n      .slice(0, 10);\r\n    \r\n    // If we don't have enough real data, add some example queries\r\n    if (topQueries.length < 5) {\r\n      const exampleQueries = [\r\n        { text: \"What are the grounds for divorce in India?\", category: \"Family Law\", frequency: 15, avgResponseTime: 2.3 },\r\n        { text: \"How to file an FIR in India?\", category: \"Criminal Law\", frequency: 12, avgResponseTime: 1.8 },\r\n        { text: \"What is the process for property registration?\", category: \"Property Law\", frequency: 9, avgResponseTime: 3.1 },\r\n        { text: \"Rights of tenants under Rent Control Act\", category: \"Property Law\", frequency: 7, avgResponseTime: 2.5 },\r\n        { text: \"How to file a consumer complaint?\", category: \"Consumer Protection\", frequency: 6, avgResponseTime: 1.7 }\r\n      ];\r\n      \r\n      // Add example queries if we don't have real data\r\n      for (let i = 0; i < exampleQueries.length && topQueries.length < 5; i++) {\r\n        if (!topQueries.some(q => q.text === exampleQueries[i].text)) {\r\n          topQueries.push(exampleQueries[i]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return topQueries;\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting top queries:', error);\r\n    \r\n    // Return fallback data if there's an error\r\n    return [\r\n      { text: \"What are the grounds for divorce in India?\", category: \"Family Law\", frequency: 15, avgResponseTime: 2.3 },\r\n      { text: \"How to file an FIR in India?\", category: \"Criminal Law\", frequency: 12, avgResponseTime: 1.8 },\r\n      { text: \"What is the process for property registration?\", category: \"Property Law\", frequency: 9, avgResponseTime: 3.1 },\r\n      { text: \"Rights of tenants under Rent Control Act\", category: \"Property Law\", frequency: 7, avgResponseTime: 2.5 },\r\n      { text: \"How to file a consumer complaint?\", category: \"Consumer Protection\", frequency: 6, avgResponseTime: 1.7 }\r\n    ];\r\n  }\r\n};\r\n\r\n// Get category breakdown\r\nexport const getCategoryBreakdown = async (timeRange = 'week') => {\r\n  initAnalyticsStorage();\r\n  \r\n  try {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 700));\r\n    \r\n    const analytics = JSON.parse(localStorage.getItem('legalAssistantAnalytics'));\r\n    const now = new Date();\r\n    let filterDate = new Date();\r\n    \r\n    // Set filter date based on time range\r\n    if (timeRange === 'week') {\r\n      filterDate.setDate(now.getDate() - 7);\r\n    } else if (timeRange === 'month') {\r\n      filterDate.setDate(now.getDate() - 30);\r\n    } else if (timeRange === 'quarter') {\r\n      filterDate.setDate(now.getDate() - 90);\r\n    }\r\n    \r\n    // Filter queries by date\r\n    const filteredQueries = analytics.queries.filter(query => {\r\n      const queryDate = new Date(query.timestamp);\r\n      return queryDate >= filterDate;\r\n    });\r\n    \r\n    // Count categories\r\n    const categories = {};\r\n    filteredQueries.forEach(query => {\r\n      const category = query.category || 'Other';\r\n      categories[category] = (categories[category] || 0) + 1;\r\n    });\r\n    \r\n    // Convert to array for chart\r\n    const categoryData = Object.entries(categories)\r\n      .map(([name, value]) => ({ name, value }))\r\n      .sort((a, b) => b.value - a.value);\r\n    \r\n    // If we don't have real data, use fallbacks\r\n    if (categoryData.length === 0) {\r\n      return [\r\n        { name: 'Family Law', value: 35 },\r\n        { name: 'Property Law', value: 25 },\r\n        { name: 'Criminal Law', value: 18 },\r\n        { name: 'Consumer Protection', value: 12 },\r\n        { name: 'Constitutional Law', value: 8 },\r\n        { name: 'Corporate Law', value: 5 },\r\n        { name: 'Other', value: 7 }\r\n      ];\r\n    }\r\n    \r\n    return categoryData;\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting category breakdown:', error);\r\n    \r\n    // Return fallback data if there's an error\r\n    return [\r\n      { name: 'Family Law', value: 35 },\r\n      { name: 'Property Law', value: 25 },\r\n      { name: 'Criminal Law', value: 18 },\r\n      { name: 'Consumer Protection', value: 12 },\r\n      { name: 'Constitutional Law', value: 8 },\r\n      { name: 'Corporate Law', value: 5 },\r\n      { name: 'Other', value: 7 }\r\n    ];\r\n  }\r\n};\r\n\r\n// Clear analytics data\r\nexport const clearAnalytics = () => {\r\n  try {\r\n    localStorage.removeItem('legalAssistantAnalytics');\r\n    initAnalyticsStorage();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing analytics:', error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}