{"ast":null,"code":"import axios from 'axios';\nimport geminiService from './geminiService';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor to add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nclass ApiService {\n  async login(credentials) {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  }\n  async register(userData) {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  }\n  async sendQuery(query) {\n    try {\n      // Try to use the Gemini service\n      return await geminiService.generateResponse(query);\n    } catch (error) {\n      console.error(\"Error in sendQuery:\", error);\n      throw error;\n    }\n  }\n  async getUserQueries(limit = 10, offset = 0) {\n    const response = await api.get(`/queries?limit=${limit}&offset=${offset}`);\n    return response.data;\n  }\n  async getQueryById(queryId) {\n    const response = await api.get(`/query/${queryId}`);\n    return response.data;\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","geminiService","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","ApiService","login","credentials","response","post","data","register","userData","sendQuery","query","generateResponse","console","getUserQueries","limit","offset","get","getQueryById","queryId"],"sources":["D:/Legal Assistant for Indian Laws/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport geminiService from './geminiService';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor to add auth token to requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nclass ApiService {\r\n  async login(credentials) {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  }\r\n\r\n  async register(userData) {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  }\r\n\r\n  async sendQuery(query) {\r\n    try {\r\n      // Try to use the Gemini service\r\n      return await geminiService.generateResponse(query);\r\n    } catch (error) {\r\n      console.error(\"Error in sendQuery:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getUserQueries(limit = 10, offset = 0) {\r\n    const response = await api.get(`/queries?limit=${limit}&offset=${offset}`);\r\n    return response.data;\r\n  }\r\n\r\n  async getQueryById(queryId) {\r\n    const response = await api.get(`/query/${queryId}`);\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAE3C,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,MAAMG,UAAU,CAAC;EACf,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,MAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAI,CAAC,aAAa,EAAEF,WAAW,CAAC;IAC3D,OAAOC,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMC,QAAQA,CAACC,QAAQ,EAAE;IACvB,MAAMJ,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAI,CAAC,gBAAgB,EAAEG,QAAQ,CAAC;IAC3D,OAAOJ,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMG,SAASA,CAACC,KAAK,EAAE;IACrB,IAAI;MACF;MACA,OAAO,MAAM7B,aAAa,CAAC8B,gBAAgB,CAACD,KAAK,CAAC;IACpD,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdc,OAAO,CAACd,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMe,cAAcA,CAACC,KAAK,GAAG,EAAE,EAAEC,MAAM,GAAG,CAAC,EAAE;IAC3C,MAAMX,QAAQ,GAAG,MAAMlB,GAAG,CAAC8B,GAAG,CAAC,kBAAkBF,KAAK,WAAWC,MAAM,EAAE,CAAC;IAC1E,OAAOX,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMW,YAAYA,CAACC,OAAO,EAAE;IAC1B,MAAMd,QAAQ,GAAG,MAAMlB,GAAG,CAAC8B,GAAG,CAAC,UAAUE,OAAO,EAAE,CAAC;IACnD,OAAOd,QAAQ,CAACE,IAAI;EACtB;AACF;AAEA,eAAe,IAAIL,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}