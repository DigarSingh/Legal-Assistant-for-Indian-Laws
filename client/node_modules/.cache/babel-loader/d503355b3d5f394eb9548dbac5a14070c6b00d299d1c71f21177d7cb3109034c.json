{"ast":null,"code":"const GEMINI_API_KEY = \"AIzaSyD0y1MbYn2-tTScBhi0gbYc6oBNxG-SwPY\";\nconst GEMINI_API_URL = \"https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent\";\nclass GeminiService {\n  async generateResponse(prompt) {\n    try {\n      var _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `You are a legal assistant specialized in Indian law. Provide accurate information about Indian legal codes and procedures. \n                  Format citations in a structured way that can be parsed by the UI.\n                  \n                  User query: ${prompt}`\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.2,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 1024\n          }\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`API request failed with status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Extract the text response\n      const textResponse = ((_data$candidates$ = data.candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || \"Sorry, I couldn't generate a response.\";\n\n      // Parse citations from the response (this is a simple implementation)\n      const citations = this.parseCitations(textResponse);\n      return {\n        answer: textResponse,\n        citations: citations,\n        confidence: 90,\n        // Gemini doesn't provide confidence scores, so we use a default\n        rawResponse: data\n      };\n    } catch (error) {\n      console.error(\"Error calling Gemini API:\", error);\n      throw error;\n    }\n  }\n  parseCitations(text) {\n    // This is a simple implementation that looks for patterns like \"IPC Section 302\"\n    const citations = [];\n    const patterns = [{\n      regex: /IPC\\s+(?:Section\\s+)?(\\d+[A-Z]?)/gi,\n      code: \"IPC\"\n    }, {\n      regex: /CrPC\\s+(?:Section\\s+)?(\\d+[A-Z]?)/gi,\n      code: \"CrPC\"\n    }, {\n      regex: /CPC\\s+(?:Section\\s+)?(\\d+[A-Z]?)/gi,\n      code: \"CPC\"\n    }, {\n      regex: /IT Act\\s+(?:Section\\s+)?(\\d+[A-Z]?)/gi,\n      code: \"IT Act\"\n    }];\n    patterns.forEach(({\n      regex,\n      code\n    }) => {\n      let match;\n      while ((match = regex.exec(text)) !== null) {\n        citations.push({\n          code,\n          section: match[1]\n        });\n      }\n    });\n    return citations;\n  }\n}\nexport default new GeminiService();","map":{"version":3,"names":["GEMINI_API_KEY","GEMINI_API_URL","GeminiService","generateResponse","prompt","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","generationConfig","temperature","topK","topP","maxOutputTokens","ok","Error","status","data","json","textResponse","candidates","content","citations","parseCitations","answer","confidence","rawResponse","error","console","patterns","regex","code","forEach","match","exec","push","section"],"sources":["D:/Legal Assistant for Indian Laws/client/src/services/geminiService.js"],"sourcesContent":["const GEMINI_API_KEY = \"AIzaSyD0y1MbYn2-tTScBhi0gbYc6oBNxG-SwPY\";\r\nconst GEMINI_API_URL = \"https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent\";\r\n\r\nclass GeminiService {\r\n  async generateResponse(prompt) {\r\n    try {\r\n      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          contents: [\r\n            {\r\n              parts: [\r\n                {\r\n                  text: `You are a legal assistant specialized in Indian law. Provide accurate information about Indian legal codes and procedures. \r\n                  Format citations in a structured way that can be parsed by the UI.\r\n                  \r\n                  User query: ${prompt}`\r\n                }\r\n              ]\r\n            }\r\n          ],\r\n          generationConfig: {\r\n            temperature: 0.2,\r\n            topK: 40,\r\n            topP: 0.95,\r\n            maxOutputTokens: 1024,\r\n          },\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API request failed with status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Extract the text response\r\n      const textResponse = data.candidates[0]?.content?.parts?.[0]?.text || \"Sorry, I couldn't generate a response.\";\r\n      \r\n      // Parse citations from the response (this is a simple implementation)\r\n      const citations = this.parseCitations(textResponse);\r\n      \r\n      return {\r\n        answer: textResponse,\r\n        citations: citations,\r\n        confidence: 90, // Gemini doesn't provide confidence scores, so we use a default\r\n        rawResponse: data\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error calling Gemini API:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  parseCitations(text) {\r\n    // This is a simple implementation that looks for patterns like \"IPC Section 302\"\r\n    const citations = [];\r\n    const patterns = [\r\n      { regex: /IPC\\s+(?:Section\\s+)?(\\d+[A-Z]?)/gi, code: \"IPC\" },\r\n      { regex: /CrPC\\s+(?:Section\\s+)?(\\d+[A-Z]?)/gi, code: \"CrPC\" },\r\n      { regex: /CPC\\s+(?:Section\\s+)?(\\d+[A-Z]?)/gi, code: \"CPC\" },\r\n      { regex: /IT Act\\s+(?:Section\\s+)?(\\d+[A-Z]?)/gi, code: \"IT Act\" },\r\n    ];\r\n\r\n    patterns.forEach(({ regex, code }) => {\r\n      let match;\r\n      while ((match = regex.exec(text)) !== null) {\r\n        citations.push({ code, section: match[1] });\r\n      }\r\n    });\r\n    \r\n    return citations;\r\n  }\r\n}\r\n\r\nexport default new GeminiService();\r\n"],"mappings":"AAAA,MAAMA,cAAc,GAAG,yCAAyC;AAChE,MAAMC,cAAc,GAAG,gFAAgF;AAEvG,MAAMC,aAAa,CAAC;EAClB,MAAMC,gBAAgBA,CAACC,MAAM,EAAE;IAC7B,IAAI;MAAA,IAAAC,iBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,cAAc,QAAQD,cAAc,EAAE,EAAE;QACtEW,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,CACL;cACEC,IAAI,EAAE;AACxB;AACA;AACA,gCAAgCd,MAAM;YACtB,CAAC;UAEL,CAAC,CACF;UACDe,gBAAgB,EAAE;YAChBC,WAAW,EAAE,GAAG;YAChBC,IAAI,EAAE,EAAE;YACRC,IAAI,EAAE,IAAI;YACVC,eAAe,EAAE;UACnB;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACd,QAAQ,CAACe,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,mCAAmChB,QAAQ,CAACiB,MAAM,EAAE,CAAC;MACvE;MAEA,MAAMC,IAAI,GAAG,MAAMlB,QAAQ,CAACmB,IAAI,CAAC,CAAC;;MAElC;MACA,MAAMC,YAAY,GAAG,EAAAxB,iBAAA,GAAAsB,IAAI,CAACG,UAAU,CAAC,CAAC,CAAC,cAAAzB,iBAAA,wBAAAC,qBAAA,GAAlBD,iBAAA,CAAoB0B,OAAO,cAAAzB,qBAAA,wBAAAC,sBAAA,GAA3BD,qBAAA,CAA6BW,KAAK,cAAAV,sBAAA,wBAAAC,sBAAA,GAAlCD,sBAAA,CAAqC,CAAC,CAAC,cAAAC,sBAAA,uBAAvCA,sBAAA,CAAyCU,IAAI,KAAI,wCAAwC;;MAE9G;MACA,MAAMc,SAAS,GAAG,IAAI,CAACC,cAAc,CAACJ,YAAY,CAAC;MAEnD,OAAO;QACLK,MAAM,EAAEL,YAAY;QACpBG,SAAS,EAAEA,SAAS;QACpBG,UAAU,EAAE,EAAE;QAAE;QAChBC,WAAW,EAAET;MACf,CAAC;IACH,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;EAEAJ,cAAcA,CAACf,IAAI,EAAE;IACnB;IACA,MAAMc,SAAS,GAAG,EAAE;IACpB,MAAMO,QAAQ,GAAG,CACf;MAAEC,KAAK,EAAE,oCAAoC;MAAEC,IAAI,EAAE;IAAM,CAAC,EAC5D;MAAED,KAAK,EAAE,qCAAqC;MAAEC,IAAI,EAAE;IAAO,CAAC,EAC9D;MAAED,KAAK,EAAE,oCAAoC;MAAEC,IAAI,EAAE;IAAM,CAAC,EAC5D;MAAED,KAAK,EAAE,uCAAuC;MAAEC,IAAI,EAAE;IAAS,CAAC,CACnE;IAEDF,QAAQ,CAACG,OAAO,CAAC,CAAC;MAAEF,KAAK;MAAEC;IAAK,CAAC,KAAK;MACpC,IAAIE,KAAK;MACT,OAAO,CAACA,KAAK,GAAGH,KAAK,CAACI,IAAI,CAAC1B,IAAI,CAAC,MAAM,IAAI,EAAE;QAC1Cc,SAAS,CAACa,IAAI,CAAC;UAAEJ,IAAI;UAAEK,OAAO,EAAEH,KAAK,CAAC,CAAC;QAAE,CAAC,CAAC;MAC7C;IACF,CAAC,CAAC;IAEF,OAAOX,SAAS;EAClB;AACF;AAEA,eAAe,IAAI9B,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}