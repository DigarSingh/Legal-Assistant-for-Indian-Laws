{"ast":null,"code":"import axios from 'axios';\n\n// Create an instance of axios with a base URL\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5000/api',\n  timeout: 10000,\n  // 10 seconds timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add interceptor to handle common error cases\napi.interceptors.response.use(response => response, error => {\n  // Handle proxy/connection errors\n  if (error.code === 'ECONNABORTED' || !error.response) {\n    console.error('Connection to server failed:', error.message);\n    // You could dispatch a notification here or handle it as needed\n    return Promise.reject({\n      response: {\n        status: 503,\n        data: {\n          message: 'Unable to connect to server. Please ensure the backend service is running.'\n        }\n      }\n    });\n  }\n  return Promise.reject(error);\n});\n\n// API endpoints\nexport default {\n  // Auth-related routes\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  forgotPassword: email => api.post('/auth/forgot-password', {\n    email\n  }),\n  // Query-related routes\n  processQuery: queryData => api.post('/queries/process', queryData),\n  getSavedQueries: () => api.get('/queries/saved'),\n  saveQuery: queryData => api.post('/queries/save', queryData),\n  // Test endpoint to check connection\n  testConnection: () => api.get('/test')\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","NODE_ENV","timeout","headers","interceptors","response","use","error","code","console","message","Promise","reject","status","data","login","credentials","post","register","userData","forgotPassword","email","processQuery","queryData","getSavedQueries","get","saveQuery","testConnection"],"sources":["D:/Legal Assistant for Indian Laws/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an instance of axios with a base URL\r\nconst api = axios.create({\r\n  baseURL: process.env.NODE_ENV === 'production' \r\n    ? '/api' \r\n    : 'http://localhost:5000/api',\r\n  timeout: 10000, // 10 seconds timeout\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// Add interceptor to handle common error cases\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Handle proxy/connection errors\r\n    if (error.code === 'ECONNABORTED' || !error.response) {\r\n      console.error('Connection to server failed:', error.message);\r\n      // You could dispatch a notification here or handle it as needed\r\n      return Promise.reject({\r\n        response: {\r\n          status: 503,\r\n          data: { \r\n            message: 'Unable to connect to server. Please ensure the backend service is running.'\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API endpoints\r\nexport default {\r\n  // Auth-related routes\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  forgotPassword: (email) => api.post('/auth/forgot-password', { email }),\r\n  \r\n  // Query-related routes\r\n  processQuery: (queryData) => api.post('/queries/process', queryData),\r\n  getSavedQueries: () => api.get('/queries/saved'),\r\n  saveQuery: (queryData) => api.post('/queries/save', queryData),\r\n  \r\n  // Test endpoint to check connection\r\n  testConnection: () => api.get('/test')\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAC1C,MAAM,GACN,2BAA2B;EAC/BC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACC,IAAI,KAAK,cAAc,IAAI,CAACD,KAAK,CAACF,QAAQ,EAAE;IACpDI,OAAO,CAACF,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACG,OAAO,CAAC;IAC5D;IACA,OAAOC,OAAO,CAACC,MAAM,CAAC;MACpBP,QAAQ,EAAE;QACRQ,MAAM,EAAE,GAAG;QACXC,IAAI,EAAE;UACJJ,OAAO,EAAE;QACX;MACF;IACF,CAAC,CAAC;EACJ;EACA,OAAOC,OAAO,CAACC,MAAM,CAACL,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,eAAe;EACb;EACAQ,KAAK,EAAGC,WAAW,IAAKpB,GAAG,CAACqB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,QAAQ,EAAGC,QAAQ,IAAKvB,GAAG,CAACqB,IAAI,CAAC,gBAAgB,EAAEE,QAAQ,CAAC;EAC5DC,cAAc,EAAGC,KAAK,IAAKzB,GAAG,CAACqB,IAAI,CAAC,uBAAuB,EAAE;IAAEI;EAAM,CAAC,CAAC;EAEvE;EACAC,YAAY,EAAGC,SAAS,IAAK3B,GAAG,CAACqB,IAAI,CAAC,kBAAkB,EAAEM,SAAS,CAAC;EACpEC,eAAe,EAAEA,CAAA,KAAM5B,GAAG,CAAC6B,GAAG,CAAC,gBAAgB,CAAC;EAChDC,SAAS,EAAGH,SAAS,IAAK3B,GAAG,CAACqB,IAAI,CAAC,eAAe,EAAEM,SAAS,CAAC;EAE9D;EACAI,cAAc,EAAEA,CAAA,KAAM/B,GAAG,CAAC6B,GAAG,CAAC,OAAO;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}